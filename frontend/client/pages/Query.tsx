import { useState, useRef } from "react";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { ArrowLeft, FileText, Scale, BookOpen, Upload, Send, AlertTriangle } from "lucide-react";

export default function Query() {
  const [problem, setProblem] = useState("");
  const [showResults, setShowResults] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [resultData, setResultData] = useState({
    section: "",
    explanation: "",
    steps: "",
    verdict: "",
  });
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const exampleQueries = [
    {
      title: "Traffic fine dispute",
      content:
        "I received a traffic fine for speeding, but I believe the speed camera was faulty or the reading was incorrect. The fine is for $250 and I was supposedly going 45 mph in a 30 mph zone, but I'm certain I was not exceeding the speed limit. What are my options to dispute this fine?",
    },
    {
      title: "Tenant eviction",
      content:
        "My landlord served me with an eviction notice claiming I haven't paid rent, but I have bank records showing all payments were made on time. The notice gives me 30 days to vacate. I've been a tenant for 2 years with no prior issues. What should I do to protect my rights?",
    },
    {
      title: "Police misconduct",
      content:
        "During a traffic stop, the police officer was verbally abusive and I believe conducted an illegal search of my vehicle without probable cause or consent. The interaction was recorded on my phone. I want to file a complaint and understand my legal options. What steps should I take?",
    },
  ];

  const handleExampleClick = (content: string) => {
    setProblem(content);
  };

  const handleGetSolution = async () => {
    if (!problem.trim()) return;

    setIsSubmitting(true);
    try {
      const response = await fetch("http://127.0.0.1:8000/analyze", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query: problem, top_k: 5 }),
      });

      if (!response.ok) {
        throw new Error("Failed to analyze");
      }

      const data = await response.json();
      setResultData({
        section: data.llm_result.section,
        explanation: data.llm_result.explanation,
        steps: data.llm_result.steps || "No steps available.",
        verdict: data.llm_result.verdict,
      });

      setShowResults(true);
    } catch (error) {
      console.error(error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Check file type (photo or video)
      const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'video/mp4', 'video/avi', 'video/mov'];

      // Check file size (max 10MB for images, 50MB for videos)
      const maxImageSize = 10 * 1024 * 1024; // 10MB
      const maxVideoSize = 50 * 1024 * 1024; // 50MB
      const isImage = file.type.startsWith('image/');
      const isVideo = file.type.startsWith('video/');
      const maxSize = isImage ? maxImageSize : maxVideoSize;

      if (!validTypes.includes(file.type)) {
        alert('Please upload a valid photo (JPEG, PNG, GIF) or video (MP4, AVI, MOV) file.');
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
        return;
      }

      if (file.size > maxSize) {
        const sizeLimit = isImage ? '10MB' : '50MB';
        alert(`File size too large. Please upload ${isImage ? 'an image' : 'a video'} smaller than ${sizeLimit}.`);
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
        return;
      }

      setUploadedFile(file);
      setUploadSuccess(false);
    }
  };

  const handleSubmitEvidence = async () => {
    if (!uploadedFile) return;

    setIsUploading(true);
    try {
      // Prepare email content
      const emailSubject = 'Police Misconduct Evidence Report';
      const emailBody = `
Query Context:
${problem}

AI Analysis:
Section: ${resultData.section}
Explanation: ${resultData.explanation}
Steps: ${resultData.steps}
Verdict: ${resultData.verdict}

Evidence file attached: ${uploadedFile.name}

This report was generated by the LexProtect AI system.`;

      // Convert file to base64 for email attachment
      const fileBase64 = await new Promise<string>((resolve) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result as string);
        reader.readAsDataURL(uploadedFile);
      });

      // Send email via backend API
      const response = await fetch('/api/send-evidence-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          to: 'support@centralpolice.gov.in',
          subject: emailSubject,
          body: emailBody,
          attachment: {
            filename: uploadedFile.name,
            content: fileBase64,
            contentType: uploadedFile.type
          }
        })
      });

      if (response.ok) {
        setUploadSuccess(true);
        setUploadedFile(null);
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
      } else {
        throw new Error('Failed to send evidence');
      }
    } catch (error) {
      console.error('Error submitting evidence:', error);
      alert('Failed to submit evidence. Please try again.');
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-white shadow-sm">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center gap-4">
            <Link to="/">
              <Button
                variant="ghost"
                size="sm"
                className="gap-2 hover:bg-blue-50"
              >
                <ArrowLeft className="h-4 w-4" />
                Back to Home
              </Button>
            </Link>
            <h1 className="text-xl font-semibold text-primary">
              LexProtect
            </h1>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        <div className={`mx-auto space-y-8 ${showResults ? 'max-w-7xl' : 'max-w-4xl'}`}>
          <div className={`${showResults ? 'grid grid-cols-1 lg:grid-cols-3 gap-8' : ''}`}>
            <div className={`${showResults ? 'lg:col-span-2' : ''} space-y-8`}>
          {/* Problem Input Section */}
          <Card className="shadow-lg border-0">
            <CardHeader className="bg-gradient-to-r from-blue-50 to-white">
              <CardTitle className="text-2xl text-center">
                Describe Your Legal Problem
              </CardTitle>
              <CardDescription className="text-center">
                Get AI-powered legal guidance tailored to your specific
                situation
              </CardDescription>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-6">
                <Textarea
                  placeholder="Describe your legal problem in detail. Include dates, parties involved, and specific concerns..."
                  value={problem}
                  onChange={(e) => setProblem(e.target.value)}
                  className="min-h-[160px] resize-y border-2 focus:border-blue-500"
                />

                <div className="flex justify-center">
                  <Button
                    onClick={handleGetSolution}
                    disabled={!problem.trim() || isSubmitting}
                    size="lg"
                    className="px-8 py-3 text-lg font-semibold bg-blue-600 hover:bg-blue-700 shadow-lg"
                  >
                    {isSubmitting ? (
                      <>
                        <div className="h-5 w-5 animate-spin rounded-full border-2 border-current border-t-transparent mr-2" />
                        Analyzing...
                      </>
                    ) : (
                      "Get Solution"
                    )}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Example Queries */}
          <Card className="shadow-lg border-0">
            <CardHeader>
              <CardTitle className="text-lg">Quick Examples</CardTitle>
              <CardDescription>
                Click on any example below to auto-fill the text area
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-3 md:grid-cols-3">
                {exampleQueries.map((query, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    onClick={() => handleExampleClick(query.content)}
                    className="h-auto p-4 text-left justify-start hover:bg-blue-50 hover:border-blue-300 transition-all"
                  >
                    <div>
                      <div className="font-semibold text-blue-700">
                        {query.title}
                      </div>
                      <div className="text-xs text-gray-500 mt-1 line-clamp-2">
                        Click to use this example
                      </div>
                    </div>
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card>

            {/* Results Sections */}
            {showResults && (
              <div className="space-y-6">
                {/* Problem Analysis */}
                <Card className="shadow-lg border-0">
                  <CardHeader className="bg-gradient-to-r from-green-50 to-white">
                    <CardTitle className="flex items-center gap-2">
                      <FileText className="h-5 w-5 text-green-600" />
                      Problem Analysis
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-6">
                    <div className="bg-gray-50 rounded-lg p-6 border-l-4 border-green-500">
                      <p className="text-gray-600 whitespace-pre-line">
                        {resultData.explanation}
                      </p>
                    </div>
                  </CardContent>
                </Card>

                {/* Suggested Steps */}
                <Card className="shadow-lg border-0">
                  <CardHeader className="bg-gradient-to-r from-orange-50 to-white">
                    <CardTitle className="flex items-center gap-2">
                      <Scale className="h-5 w-5 text-orange-600" />
                      Suggested Steps
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-6">
                    <div className="bg-gray-50 rounded-lg p-6 border-l-4 border-orange-500">
                      <p className="text-gray-600 whitespace-pre-line">
                        {resultData.steps || "Coming soon: Actionable steps will appear here."}
                      </p>
                    </div>
                  </CardContent>
                </Card>

                {/* Relevant Laws */}
                <Card className="shadow-lg border-0">
                  <CardHeader className="bg-gradient-to-r from-purple-50 to-white">
                    <CardTitle className="flex items-center gap-2">
                      <BookOpen className="h-5 w-5 text-purple-600" />
                      Relevant Laws
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-6">
                    <div className="bg-gray-50 rounded-lg p-6 border-l-4 border-purple-500">
                      <p className="text-gray-600">
                        {resultData.section}
                      </p>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}
            </div>

            {/* Upload Evidence Panel */}
            {showResults && (
              <div className="lg:col-span-1">
                <Card className="shadow-lg border-0 sticky top-4">
                  <CardHeader className="bg-gradient-to-r from-red-50 to-white">
                    <CardTitle className="flex items-center gap-2 text-red-700">
                      <Upload className="h-5 w-5" />
                      Upload Evidence
                    </CardTitle>
                    <CardDescription>
                      Submit evidence of police misconduct
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="p-6 space-y-4">
                    {/* File Upload */}
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Photo or Video Evidence</label>
                      <p className="text-xs text-gray-500">
                        Max size: 10MB for images, 50MB for videos
                      </p>
                      <Input
                        ref={fileInputRef}
                        type="file"
                        accept="image/*,video/*"
                        onChange={handleFileUpload}
                        className="cursor-pointer"
                      />
                      {uploadedFile && (
                        <div className="text-sm text-green-600 space-y-1">
                          <p className="flex items-center gap-1">
                            <FileText className="h-4 w-4" />
                            {uploadedFile.name}
                          </p>
                          <p className="text-xs text-gray-500">
                            Size: {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB
                          </p>
                        </div>
                      )}
                    </div>

                    {/* Submit Button */}
                    <Button
                      onClick={handleSubmitEvidence}
                      disabled={!uploadedFile || isUploading}
                      className="w-full bg-red-600 hover:bg-red-700"
                    >
                      {isUploading ? (
                        <>
                          <div className="h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent mr-2" />
                          Submitting...
                        </>
                      ) : (
                        <>
                          <Send className="h-4 w-4 mr-2" />
                          Submit Evidence
                        </>
                      )}
                    </Button>

                    {/* Success Message */}
                    {uploadSuccess && (
                      <Alert className="border-green-200 bg-green-50">
                        <AlertTriangle className="h-4 w-4 text-green-600" />
                        <AlertDescription className="text-green-700">
                          Evidence submitted successfully to authorities.
                        </AlertDescription>
                      </Alert>
                    )}

                    {/* Disclaimer */}
                    <Alert className="border-yellow-200 bg-yellow-50">
                      <AlertTriangle className="h-4 w-4 text-yellow-600" />
                      <AlertDescription className="text-sm text-yellow-700">
                        <strong>Disclaimer:</strong> By uploading evidence, you agree that this will be forwarded to the authorities (support@centralpolice.gov.in) along with your query context and AI analysis.
                      </AlertDescription>
                    </Alert>
                  </CardContent>
                </Card>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}
